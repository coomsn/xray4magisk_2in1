#!/system/bin/sh
  clear; cd "${0%/*}"
# define color
  normal=$(printf '\033[0m'); green=$(printf '\033[0;32m'); red=$(printf '\033[91m')
# environment variables
  export PATH="/data/adb/magisk:/data/adb/ksu/bin:$PATH:/system/bin"
  source ${0%/*}/settings.ini
  
uid_filter() {
[ -f "uids.list" ] && rm "uids.list"
uid=""; uids=""
for package_name in ${package_list[@]}; do
    uid=$(busybox awk -v package="${package_name}" '$0 ~ package {print $2}' /data/system/packages.list)
    [ -n "${uid}" ] && uids+=("${uid}")
    echo "${package_name}: ${uid}" >> ${0%/*}/uids.list
done
}

start_proxy() {
  enable_ip_forwarding
  if [ -f "${Bin}" ]; then
    chmod 755 ${Bin}
    chown root:net_admin ${Bin}
    uid_filter
    executeProxyRules
    ulimit -SHn 1000000
    [[ "${Bin##*/}" == "xray" ]] && nohup busybox setuidgid 0:${gid} ${Bin} run -confdir ${config_dir} > /dev/null 2>&1 &
    [[ "${Bin##*/}" == "sing-box" ]] && nohup busybox setuidgid 0:${gid} ${Bin} run -c ${config_file} -D ./binary/ > /dev/null 2>&1 &
  fi
  create_task
}

stop_proxy() {
  delete_task
  PID=$(pidof ${Bin})
  pidof ${Bin} > /dev/null 2>&1 && kill -15 ${PID} > /dev/null 2>&1
  executeDeleteProxyRules > /dev/null 2>&1
  disable_ip_forwarding
  rm ${0%/*}/*.list
  rm ${0%/*}/logs/*.log
}

createProxyRules() {
  # Create routes and rules
  ${1} rule add fwmark "${fwmark}" lookup ${2}  pref $(expr ${2} \* 10)
  ${1} route add local default dev lo table ${2}
  # Create custom chain
  ${3} -t mangle -N ${4}_EXTERNAL
  ${3} -t mangle -N ${4}_LOCAL
  ${3} -t mangle -N ${4}_QUIC_FILTER
  # Create external custom chain rules
for subnet in ${5}; do
  [[ "${subnet}" == "192.168.0.0/16" ]] && \
  ${3} -t mangle -A ${4}_EXTERNAL -d ${subnet} -p udp ! --dport 53 -j RETURN || \
  ${3} -t mangle -A ${4}_EXTERNAL -d ${subnet} -p udp -j RETURN
  ${3} -t mangle -A ${4}_EXTERNAL -d ${subnet} -p tcp -j RETURN
done
  ${3} -t mangle -A ${4}_EXTERNAL -p tcp -j TPROXY --on-port ${tp_port} --tproxy-mark ${fwmark}
  ${3} -t mangle -A ${4}_EXTERNAL -p udp -j TPROXY --on-port ${tp_port} --tproxy-mark ${fwmark}
  # Create internal custom chain rules
  ${3} -t mangle -A ${4}_LOCAL -m owner --gid-owner ${gid} -j RETURN
for subnet in ${5}; do
  [[ "${subnet}" == "192.168.0.0/16" ]] && \
  ${3} -t mangle -A ${4}_LOCAL -d ${subnet} -p udp ! --dport 53 -j RETURN || \
  ${3} -t mangle -A ${4}_LOCAL -d ${subnet} -p udp -j RETURN
  ${3} -t mangle -A ${4}_LOCAL -d ${subnet} -p tcp -j RETURN
done
for appid in ${6}; do
  ${3} -t mangle -A ${4}_LOCAL -m owner --uid-owner ${appid} -p tcp -j RETURN
  ${3} -t mangle -A ${4}_LOCAL -m owner --uid-owner ${appid} -p udp ! --dport 53 -j RETURN
done
  ${3} -t mangle -A ${4}_LOCAL -j MARK --set-mark ${fwmark}
  # Create QUIC_FILTER custom chain rules
  ${3} -t mangle -A ${4}_QUIC_FILTER -p udp --dport 443 -j DROP
  ${3} -t mangle -A ${4}_QUIC_FILTER -p udp --dport 80 -j DROP
  # Referencing custom chains
  ${3} -t mangle -A PREROUTING -j ${4}_EXTERNAL
  ${3} -t mangle -A OUTPUT -j ${4}_LOCAL
  ${3} -t mangle -A OUTPUT -j ${4}_QUIC_FILTER
if [ ${list_switch} = true ]; then
  local list_name=$(echo ${3} | busybox awk '{print $1}')
  ${3} -t mangle -L -nv > ${0%/*}/${list_name}_mangle_rules.list
fi
}

executeProxyRules() {
  createProxyRules ip "${table}" "${IPV}" "${Bin##*/}" "${intranet[*]}" "${uids[*]}"
if [ "${ip6tables_switch}" = true ]; then
  createProxyRules "ip -6" "$(expr ${table} \* 2)" "${IP6V}" "${Bin##*/}6" "${intranet6[*]}" "${uids[*]}"
fi
}

deleteProxyRules() {
  ${1} rule del fwmark "${fwmark}" table ${2} pref $(expr ${2} \* 10)
  ${1} route del local default dev lo table ${2}
  ${1} route flush table ${2}
  # First, delete the reference chain, otherwise the custom chain cannot be deleted.
  ${3} -t mangle -D PREROUTING -j ${4}_EXTERNAL
  ${3} -t mangle -D OUTPUT -j ${4}_LOCAL
  ${3} -t mangle -D OUTPUT -j ${4}_QUIC_FILTER
  # Secondly, delete the custom rules of the custom chain.
  ${3} -t mangle -F ${4}_EXTERNAL
  ${3} -t mangle -F ${4}_LOCAL
  ${3} -t mangle -F ${4}_QUIC_FILTER
  # Finally, delete the custom chain.
  ${3} -t mangle -X ${4}_EXTERNAL
  ${3} -t mangle -X ${4}_LOCAL
  ${3} -t mangle -X ${4}_QUIC_FILTER
}

executeDeleteProxyRules() {
    deleteProxyRules ip "${table}" "${IPV}" "${Bin##*/}"
if [ "${ip6tables_switch}" = true ]; then
    deleteProxyRules "ip -6" "$(expr ${table} \* 2)" "${IP6V}" "${Bin##*/}6"
fi
}

create_task() {
  if pgrep busybox crond > /dev/null ; then
    kill -9 $(pgrep busybox crond)
  fi
    echo '0 */12 * * * touch /data/adb/modules/xray-module/disable && sleep 3 && rm /data/adb/modules/xray-module/disable' > ${0%/*}/root
    # Used for timed task testing
    # echo '*/1 * * * * echo "test" >> '"${0%/*}"'/1.txt' >> ${0%/*}/root
    nohup busybox crond -c ${0%/*}/ > /dev/null 2>&1 &
    echo -e "${green}New task:\n$(busybox crontab -l -c ${0%/*}/)${normal}"
}

delete_task() {
  if pgrep busybox crond > /dev/null ; then
    kill -9 $(pgrep busybox crond)
    rm ${0%/*}/root > /dev/null 2>&1
  fi
}

run_proxy() {
  stop_proxy > /dev/null 2>&1
  start_proxy
}

net_ip() {
  local_ip=$(ip route get 1.1.1.1 | awk '{for(i=1;i<=NF;i++) if ($i=="src") {print $(i+1); break}}') && echo "${local_ip}"
}

net_id() {
# get wifi ssid
  ssid=$(iw dev wlan0 link | grep -i ssid | awk '{for(i=1;i<=NF;i++) if ($i=="SSID:") {print $(i+1); break}}')
  [ -z "$ssid" ] && echo "mobile" || echo "${ssid}"
}
# @_@

#!/bin/bash

enable_ip_forwarding() {
  echo "Enabling IP forwarding and localnet routing..."
  sysctl -w net.ipv4.ip_forward=1
  sysctl -w net.ipv6.conf.all.forwarding=1

  sysctl -w net.ipv6.conf.all.accept_ra=2
  sysctl -w net.ipv6.conf.wlan0.accept_ra=2
  sysctl -w net.ipv6.conf.all.disable_ipv6=0
  sysctl -w net.ipv6.conf.default.disable_ipv6=0
  sysctl -w net.ipv6.conf.wlan0.disable_ipv6=0
}

disable_ip_forwarding() {
    echo "Disabling IP forwarding and localnet routing..."
  sysctl -w net.ipv4.ip_forward=1
  sysctl -w net.ipv6.conf.all.forwarding=0

  sysctl -w net.ipv6.conf.all.accept_ra=0
  sysctl -w net.ipv6.conf.wlan0.accept_ra=0
  sysctl -w net.ipv6.conf.all.disable_ipv6=1
  sysctl -w net.ipv6.conf.default.disable_ipv6=1
  sysctl -w net.ipv6.conf.wlan0.disable_ipv6=1
}

